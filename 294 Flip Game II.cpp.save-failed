#include <bits/stdc++.h>

using namespace std;


map< multiset<int>, int> SG;
map<int,int> _SG;
int sg(multiset<int> x)
{
    if(SG.find(x) != SG.end()) return SG[x];
    vector<int> s;  // ºó×ºµÄÖµ
    for(auto itm:x)
    {
        if(itm >= 2)
        {
            multiset<int> y(x);
            y.erase(y.find(itm));
            for(int i = 0; i<= (itm - 2)/2;i++)
            {
                y.insert(i);
                y.insert(itm - i-2);
                s.push_back(sg(y));
                y.erase(y.find(i));
                y.erase(y.find(itm-i-2));
            }

        }
    }

    int p = 0;
    sort(s.begin(), s.end());

//    if( x == {2,2})
//    {
//        multiset<int> y = {2,2};
//        if(x == y)
//        {
//            for(auto xx: s) cout<<xx<<" ";
//            cout<<"???"<<endl;
//        }
//
//    }
    for(int i = 0;i< s.size();i++)
    {
        if(s[i] == p) p++;
        else break;
    }
    SG[x]  = p;
    return p;
}

int sg(int x)
{
    vector<int> ;
    for(int i = 0;i<= (x-2)/2; i++)
    {
        p.push_back(_SG[i]^_SG[x - 2- i]);
    }
    int p = 0;
    sort(p.begin(), p.end());
    for(int i = 0;i< s.size();i++)
    {
        if(s[i] == p) p++;
        else break;
    }
}
int main()
{
    SG[{}] = 0;
    SG[{0}] = 0; SG[{1}] = 0;
    SG[{0,0}] = 0; SG[{0,1}] = 0;
    SG[{1,1}] = 0;

    for(int i = 1;i< 250; i++)
    {
        cout<<i<<" "<<sg({i})<<endl;

//        for(auto a : SG)
//        {
//            cout<<"{ ";
//            for(auto b: a.first)
//                cout<<b<<" ";
//            cout<<"} ";
//            cout<<a.second<<endl;
//        }

        cout<<"-------------"<<endl;

    }


//
//    for(int i = 1; i<25; i++)
//    {
//        string s;
//        s.resize(i);
//        for(int j = 0; j< i; j++) s[j] = '+';
//        cout<<i<<" "<<s<<canW(s)<<endl;
//    }

}
